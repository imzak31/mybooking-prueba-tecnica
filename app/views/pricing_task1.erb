<div class="container mt-4">
  <div class="row">
    <div class="col-12">
      <h1>üí∞ Consulta de Precios</h1>
      <p class="text-muted">Consulta precios por categor√≠a, sucursal y temporada</p>
      
      <!-- Filtros en cascada -->
      <div class="card mb-4">
        <div class="card-header">
          <h5>üîç Filtros</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <!-- Sucursal (Primera selecci√≥n - habilita todo lo dem√°s) -->
            <div class="col-md-3 mb-3">
              <label for="rentalLocationSelect" class="form-label">Sucursal *</label>
              <select class="form-select" id="rentalLocationSelect" onchange="onRentalLocationChange()">
                <option value="">Selecciona una sucursal</option>
              </select>
            </div>
            
            <!-- Tipo de Tarifa (Se habilita cuando se selecciona sucursal) -->
            <div class="col-md-3 mb-3">
              <label for="rateTypeSelect" class="form-label">Tipo de Tarifa *</label>
              <select class="form-select" id="rateTypeSelect" disabled onchange="onRateTypeChange()">
                <option value="">Selecciona tipo de tarifa</option>
              </select>
            </div>
            
            <!-- Conjunto de Temporadas (Se habilita cuando se selecciona tipo tarifa) -->
            <div class="col-md-3 mb-3">
              <label for="seasonDefinitionSelect" class="form-label">Conjunto de Temporadas</label>
              <select class="form-select" id="seasonDefinitionSelect" disabled onchange="onSeasonDefinitionChange()">
                <option value="">Todas las temporadas</option>
              </select>
            </div>
            
            <!-- Temporada espec√≠fica (Se habilita cuando se selecciona conjunto) -->
            <div class="col-md-3 mb-3">
              <label for="seasonSelect" class="form-label">Temporada</label>
              <select class="form-select" id="seasonSelect" disabled onchange="loadPrices()">
                <option value="">Selecciona temporada</option>
              </select>
            </div>
          </div>
          
          <div class="row">
            <!-- Unidad de tiempo -->
            <div class="col-md-3 mb-3">
              <label for="timeMeasurementSelect" class="form-label">Unidad</label>
              <select class="form-select" id="timeMeasurementSelect" onchange="loadPrices()">
                <option value="day">D√≠as</option>
                <option value="hour">Horas</option>
                <option value="minute">Minutos</option>
                <option value="month">Meses</option>
              </select>
            </div>
            
            <div class="col-md-9 d-flex align-items-end">
              <button type="button" class="btn btn-primary" onclick="loadPrices()" id="searchButton" disabled>
                üîç Buscar Precios
              </button>
              <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearFilters()">
                üóëÔ∏è Limpiar
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Resultados -->
      <div id="resultsPanel" style="display: none;">
        <div class="card">
          <div class="card-header">
            <h5 id="resultsTitle">üìä Precios Encontrados</h5>
          </div>
          <div class="card-body">
            <div id="resultsContent"></div>
          </div>
        </div>
      </div>

      <!-- Loader -->
      <div id="loadingPanel" style="display: none;">
        <div class="card">
          <div class="card-body text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2">Cargando datos...</p>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<script>
// Variables globales para manejar estado
let currentFilters = {
  rental_location_id: null,
  rate_type_id: null,
  season_definition_id: null,
  season_id: null,
  time_measurement: 'day'
};

// Cargar sucursales al inicializar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
  loadRentalLocations();
});

async function loadRentalLocations() {
  try {
    const response = await fetch('/api/pricing/rental-locations');
    const result = await response.json();
    
    if (result.success) {
      const select = document.getElementById('rentalLocationSelect');
      select.innerHTML = '<option value="">Selecciona una sucursal</option>';
      
      result.data.forEach(location => {
        const option = document.createElement('option');
        option.value = location.id;
        option.textContent = location.name;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error loading rental locations:', error);
    showError('Error cargando sucursales');
  }
}

async function onRentalLocationChange() {
  const locationId = document.getElementById('rentalLocationSelect').value;
  currentFilters.rental_location_id = locationId;
  
  // Resetear filtros dependientes
  resetDependentFilters(['rateType', 'seasonDefinition', 'season']);
  
  if (locationId) {
    // Habilitar tipo de tarifa y cargar opciones
    document.getElementById('rateTypeSelect').disabled = false;
    await loadRateTypes(locationId);
    enableSearchButton();
  } else {
    // Deshabilitar todos los filtros dependientes
    disableDependentFilters(['rateType', 'seasonDefinition', 'season']);
    disableSearchButton();
  }
}

async function loadRateTypes(locationId) {
  showLoading();
  try {
    const response = await fetch(`/api/pricing/rate-types?rental_location_id=${locationId}`);
    const result = await response.json();
    
    if (result.success) {
      const select = document.getElementById('rateTypeSelect');
      select.innerHTML = '<option value="">Selecciona tipo de tarifa</option>';
      
      result.data.forEach(rateType => {
        const option = document.createElement('option');
        option.value = rateType.id;
        option.textContent = rateType.name;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error loading rate types:', error);
    showError('Error cargando tipos de tarifa');
  } finally {
    hideLoading();
  }
}

async function onRateTypeChange() {
  const rateTypeId = document.getElementById('rateTypeSelect').value;
  currentFilters.rate_type_id = rateTypeId;
  
  // Resetear filtros dependientes
  resetDependentFilters(['seasonDefinition', 'season']);
  
  if (rateTypeId && currentFilters.rental_location_id) {
    // Habilitar conjunto de temporadas y cargar opciones
    document.getElementById('seasonDefinitionSelect').disabled = false;
    await loadSeasonDefinitions(currentFilters.rental_location_id, rateTypeId);
  } else {
    disableDependentFilters(['seasonDefinition', 'season']);
  }
}

async function loadSeasonDefinitions(locationId, rateTypeId) {
  showLoading();
  try {
    const response = await fetch(`/api/pricing/season-definitions?rental_location_id=${locationId}&rate_type_id=${rateTypeId}`);
    const result = await response.json();
    
    if (result.success) {
      const select = document.getElementById('seasonDefinitionSelect');
      select.innerHTML = '<option value="">Todas las temporadas</option>';
      
      result.data.forEach(seasonDef => {
        const option = document.createElement('option');
        option.value = seasonDef.id || 'null';
        option.textContent = seasonDef.name;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error loading season definitions:', error);
    showError('Error cargando conjuntos de temporadas');
  } finally {
    hideLoading();
  }
}

async function onSeasonDefinitionChange() {
  const seasonDefinitionId = document.getElementById('seasonDefinitionSelect').value;
  currentFilters.season_definition_id = seasonDefinitionId;
  
  // Resetear temporada espec√≠fica
  resetDependentFilters(['season']);
  
  if (seasonDefinitionId && seasonDefinitionId !== 'null') {
    // Habilitar temporadas espec√≠ficas y cargar opciones
    document.getElementById('seasonSelect').disabled = false;
    await loadSeasons(seasonDefinitionId);
  } else {
    disableDependentFilters(['season']);
  }
}

async function loadSeasons(seasonDefinitionId) {
  showLoading();
  try {
    const response = await fetch(`/api/pricing/seasons?season_definition_id=${seasonDefinitionId}`);
    const result = await response.json();
    
    if (result.success) {
      const select = document.getElementById('seasonSelect');
      select.innerHTML = '<option value="">Todas las temporadas del conjunto</option>';
      
      result.data.forEach(season => {
        const option = document.createElement('option');
        option.value = season.id || 'null';
        option.textContent = season.name;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Error loading seasons:', error);
    showError('Error cargando temporadas');
  } finally {
    hideLoading();
  }
}

async function loadPrices() {
  if (!currentFilters.rental_location_id || !currentFilters.rate_type_id) {
    showError('Por favor selecciona al menos Sucursal y Tipo de Tarifa');
    return;
  }
  
  showLoading();
  
  // Construir query string
  const params = new URLSearchParams();
  params.append('rental_location_id', currentFilters.rental_location_id);
  params.append('rate_type_id', currentFilters.rate_type_id);
  params.append('time_measurement', document.getElementById('timeMeasurementSelect').value);
  
  const seasonDefinitionId = document.getElementById('seasonDefinitionSelect').value;
  const seasonId = document.getElementById('seasonSelect').value;
  
  if (seasonDefinitionId) {
    params.append('season_definition_id', seasonDefinitionId);
  }
  
  if (seasonId) {
    params.append('season_id', seasonId);
  }
  
  try {
    const response = await fetch(`/api/pricing/prices?${params.toString()}`);
    const result = await response.json();
    
    if (result.success) {
      showPricesResults(result.data, result.filters);
    } else {
      showError(result.error || 'Error cargando precios');
    }
  } catch (error) {
    console.error('Error loading prices:', error);
    showError('Error de conexi√≥n');
  } finally {
    hideLoading();
  }
}

function showPricesResults(categories, filters) {
  const title = document.getElementById('resultsTitle');
  const content = document.getElementById('resultsContent');
  
  title.textContent = `üìä Precios Encontrados (${categories.length} categor√≠as)`;
  
  if (categories.length === 0) {
    content.innerHTML = `
      <div class="alert alert-info">
        <h6>No se encontraron precios</h6>
        <p class="mb-0">No hay precios disponibles para los filtros seleccionados.</p>
      </div>
    `;
  } else {
    let html = '';
    
    categories.forEach(category => {
      html += `
        <div class="card mb-3">
          <div class="card-header">
            <h6 class="mb-0">
              <strong>Categor√≠a ${category.category_code}</strong> - ${category.category_name}
            </h6>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-sm">
                <thead>
                  <tr>
                    <th>Unidades</th>
                    <th>Precio</th>
                    <th>Temporada</th>
                    <th>Unidad</th>
                  </tr>
                </thead>
                <tbody>
      `;
      
      category.prices.forEach(price => {
        html += `
          <tr>
            <td>${price.units}</td>
            <td><strong>‚Ç¨${price.price.toFixed(2)}</strong></td>
            <td>${price.season_name}</td>
            <td>${price.time_measurement}</td>
          </tr>
        `;
      });
      
      html += `
                </tbody>
              </table>
            </div>
          </div>
        </div>
      `;
    });
    
    content.innerHTML = html;
  }
  
  showResults();
}

function resetDependentFilters(filters) {
  const filterMap = {
    rateType: 'rateTypeSelect',
    seasonDefinition: 'seasonDefinitionSelect', 
    season: 'seasonSelect'
  };
  
  filters.forEach(filter => {
    const selectId = filterMap[filter];
    if (selectId) {
      const select = document.getElementById(selectId);
      select.innerHTML = '<option value="">Selecciona...</option>';
      select.value = '';
    }
  });
}

function disableDependentFilters(filters) {
  const filterMap = {
    rateType: 'rateTypeSelect',
    seasonDefinition: 'seasonDefinitionSelect',
    season: 'seasonSelect'
  };
  
  filters.forEach(filter => {
    const selectId = filterMap[filter];
    if (selectId) {
      document.getElementById(selectId).disabled = true;
    }
  });
}

function enableSearchButton() {
  document.getElementById('searchButton').disabled = false;
}

function disableSearchButton() {
  document.getElementById('searchButton').disabled = true;
}

function clearFilters() {
  // Resetear todos los selects
  document.getElementById('rentalLocationSelect').value = '';
  document.getElementById('rateTypeSelect').value = '';
  document.getElementById('seasonDefinitionSelect').value = '';
  document.getElementById('seasonSelect').value = '';
  document.getElementById('timeMeasurementSelect').value = 'day';
  
  // Deshabilitar filtros dependientes
  disableDependentFilters(['rateType', 'seasonDefinition', 'season']);
  disableSearchButton();
  
  // Resetear filtros actuales
  currentFilters = {
    rental_location_id: null,
    rate_type_id: null,
    season_definition_id: null,
    season_id: null,
    time_measurement: 'day'
  };
  
  hideResults();
}

function showError(message) {
  const content = document.getElementById('resultsContent');
  const title = document.getElementById('resultsTitle');
  
  title.textContent = '‚ùå Error';
  content.innerHTML = `<div class="alert alert-danger">${message}</div>`;
  showResults();
}

function showLoading() {
  document.getElementById('loadingPanel').style.display = 'block';
  hideResults();
}

function hideLoading() {
  document.getElementById('loadingPanel').style.display = 'none';
}

function showResults() {
  document.getElementById('resultsPanel').style.display = 'block';
}

function hideResults() {
  document.getElementById('resultsPanel').style.display = 'none';
}
</script>
